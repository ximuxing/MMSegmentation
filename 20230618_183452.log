2023/06/18 18:34:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Mar 13 2023, 10:26:41) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: B1.gpu.small
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.1, V11.1.105
    GCC: x86_64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 1.8.0+cu111
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.9.0+cu111
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/18 18:34:54 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(64, 64))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'DubaiDataset'
data_root = 'Watermelon87_Semantic_Seg_Mask/'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='DubaiDataset',
        data_root='Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='DubaiDataset',
        data_root='Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='DubaiDataset',
        data_root='Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=3000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1500),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/WatermelonDataset'
randomness = dict(seed=0)

2023/06/18 18:35:26 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/18 18:35:26 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/18 18:35:34 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/18 18:35:35 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/18 18:35:35 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/18 18:35:35 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/18 18:35:35 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/18 18:35:35 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/18 18:35:35 - mmengine - INFO - Checkpoints will be saved to /gemini/code/MMSegmentation_Tutorials/20230612/mmsegmentation/work_dirs/WatermelonDataset.
2023/06/18 18:35:43 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230617_20230618_183452
2023/06/18 18:35:43 - mmengine - INFO - Iter(train) [   6/3000]  lr: 9.9989e-03  eta: 1:05:37  time: 1.3151  data_time: 0.0090  memory: 3615  loss: 0.1463  decode.loss_ce: 0.1035  decode.acc_seg: 37.4481  aux.loss_ce: 0.0428  aux.acc_seg: 32.8400
2023/06/18 18:36:42 - mmengine - INFO - Iter(train) [ 100/3000]  lr: 9.9779e-03  eta: 0:32:06  time: 0.4670  data_time: 0.0102  memory: 3615  loss: 0.0685  decode.loss_ce: 0.0472  decode.acc_seg: 80.2490  aux.loss_ce: 0.0214  aux.acc_seg: 85.0525
2023/06/18 18:37:28 - mmengine - INFO - Iter(train) [ 200/3000]  lr: 9.9557e-03  eta: 0:26:19  time: 0.5397  data_time: 0.0098  memory: 3615  loss: 0.0702  decode.loss_ce: 0.0477  decode.acc_seg: 77.7130  aux.loss_ce: 0.0224  aux.acc_seg: 66.9556
2023/06/18 18:38:16 - mmengine - INFO - Iter(train) [ 300/3000]  lr: 9.9334e-03  eta: 0:24:00  time: 0.3906  data_time: 0.0100  memory: 3615  loss: 0.0573  decode.loss_ce: 0.0403  decode.acc_seg: 80.3009  aux.loss_ce: 0.0170  aux.acc_seg: 79.2999
2023/06/18 18:39:16 - mmengine - INFO - Iter(train) [ 400/3000]  lr: 9.9111e-03  eta: 0:23:50  time: 0.4449  data_time: 0.0099  memory: 3615  loss: 0.0663  decode.loss_ce: 0.0473  decode.acc_seg: 85.0281  aux.loss_ce: 0.0190  aux.acc_seg: 81.1890
2023/06/18 18:39:31 - mmengine - INFO - per class results:
2023/06/18 18:39:31 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 59.98 | 99.79 |
|  Watermelon red soil   |  3.99 |  4.01 |
|    Watermelon shell    |  0.0  |  0.0  |
| Watermelon white skin  |  9.32 |  9.37 |
| Watermelon black seeds | 21.24 | 23.02 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 18:39:31 - mmengine - INFO - Iter(val) [11/11]    aAcc: 60.6700  mIoU: 15.7500  mAcc: 22.7000  data_time: 0.1937  time: 1.4363
2023/06/18 18:40:40 - mmengine - INFO - Iter(train) [ 500/3000]  lr: 9.8888e-03  eta: 0:24:04  time: 0.5104  data_time: 0.0103  memory: 3615  loss: 0.0515  decode.loss_ce: 0.0364  decode.acc_seg: 77.3285  aux.loss_ce: 0.0151  aux.acc_seg: 80.9326
2023/06/18 18:41:41 - mmengine - INFO - Iter(train) [ 600/3000]  lr: 9.8665e-03  eta: 0:23:16  time: 0.6946  data_time: 0.0105  memory: 3615  loss: 0.0532  decode.loss_ce: 0.0383  decode.acc_seg: 79.4189  aux.loss_ce: 0.0149  aux.acc_seg: 84.6100
2023/06/18 18:42:49 - mmengine - INFO - Iter(train) [ 700/3000]  lr: 9.8442e-03  eta: 0:22:50  time: 0.5799  data_time: 0.0098  memory: 3615  loss: 0.0441  decode.loss_ce: 0.0316  decode.acc_seg: 91.2750  aux.loss_ce: 0.0125  aux.acc_seg: 88.8763
2023/06/18 18:43:58 - mmengine - INFO - Iter(train) [ 800/3000]  lr: 9.8218e-03  eta: 0:22:17  time: 0.8230  data_time: 0.0092  memory: 3615  loss: 0.0412  decode.loss_ce: 0.0285  decode.acc_seg: 84.6436  aux.loss_ce: 0.0128  aux.acc_seg: 81.4758
2023/06/18 18:44:01 - mmengine - INFO - per class results:
2023/06/18 18:44:01 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 67.27 | 96.95 |
|  Watermelon red soil   |  39.6 | 41.57 |
|    Watermelon shell    | 14.94 | 16.01 |
| Watermelon white skin  | 31.75 | 33.37 |
| Watermelon black seeds | 32.54 | 34.44 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 18:44:01 - mmengine - INFO - Iter(val) [11/11]    aAcc: 71.7900  mIoU: 31.0200  mAcc: 37.0600  data_time: 0.0094  time: 0.3071
2023/06/18 18:45:15 - mmengine - INFO - Iter(train) [ 900/3000]  lr: 9.7995e-03  eta: 0:21:46  time: 0.4890  data_time: 0.0105  memory: 3615  loss: 0.0400  decode.loss_ce: 0.0280  decode.acc_seg: 81.3538  aux.loss_ce: 0.0121  aux.acc_seg: 82.1625
2023/06/18 18:46:08 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230617_20230618_183452
2023/06/18 18:46:08 - mmengine - INFO - Iter(train) [1000/3000]  lr: 9.7772e-03  eta: 0:20:27  time: 0.6590  data_time: 0.0097  memory: 3615  loss: 0.0440  decode.loss_ce: 0.0306  decode.acc_seg: 76.7242  aux.loss_ce: 0.0134  aux.acc_seg: 70.9351
2023/06/18 18:47:11 - mmengine - INFO - Iter(train) [1100/3000]  lr: 9.7549e-03  eta: 0:19:27  time: 0.8151  data_time: 0.0089  memory: 3615  loss: 0.0378  decode.loss_ce: 0.0262  decode.acc_seg: 91.1713  aux.loss_ce: 0.0116  aux.acc_seg: 90.5731
2023/06/18 18:48:16 - mmengine - INFO - Iter(train) [1200/3000]  lr: 9.7325e-03  eta: 0:18:32  time: 0.8951  data_time: 0.0101  memory: 3615  loss: 0.0481  decode.loss_ce: 0.0336  decode.acc_seg: 88.2935  aux.loss_ce: 0.0145  aux.acc_seg: 87.3047
2023/06/18 18:48:21 - mmengine - INFO - per class results:
2023/06/18 18:48:21 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 65.11 | 98.68 |
|  Watermelon red soil   | 28.61 | 28.93 |
|    Watermelon shell    |  4.53 |  4.85 |
| Watermelon white skin  | 33.29 | 34.31 |
| Watermelon black seeds |  8.85 |  8.88 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 18:48:21 - mmengine - INFO - Iter(val) [11/11]    aAcc: 68.6000  mIoU: 23.4000  mAcc: 29.2800  data_time: 0.0079  time: 0.3798
2023/06/18 18:49:16 - mmengine - INFO - Iter(train) [1300/3000]  lr: 9.7102e-03  eta: 0:17:21  time: 0.4334  data_time: 0.0100  memory: 3615  loss: 0.0379  decode.loss_ce: 0.0267  decode.acc_seg: 72.8088  aux.loss_ce: 0.0112  aux.acc_seg: 72.2107
2023/06/18 18:50:20 - mmengine - INFO - Iter(train) [1400/3000]  lr: 9.6878e-03  eta: 0:16:24  time: 0.7339  data_time: 0.0106  memory: 3615  loss: 0.0410  decode.loss_ce: 0.0292  decode.acc_seg: 72.4365  aux.loss_ce: 0.0118  aux.acc_seg: 74.1852
2023/06/18 18:51:25 - mmengine - INFO - Iter(train) [1500/3000]  lr: 9.6655e-03  eta: 0:15:25  time: 0.3537  data_time: 0.0099  memory: 3615  loss: 0.0508  decode.loss_ce: 0.0361  decode.acc_seg: 71.3470  aux.loss_ce: 0.0148  aux.acc_seg: 72.2504
2023/06/18 18:51:25 - mmengine - INFO - Saving checkpoint at 1500 iterations
2023/06/18 18:52:20 - mmengine - INFO - Iter(train) [1600/3000]  lr: 9.6431e-03  eta: 0:14:18  time: 0.6277  data_time: 0.0101  memory: 3615  loss: 0.0414  decode.loss_ce: 0.0288  decode.acc_seg: 86.2579  aux.loss_ce: 0.0126  aux.acc_seg: 85.7361
2023/06/18 18:52:25 - mmengine - INFO - per class results:
2023/06/18 18:52:25 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       |  71.1 | 98.27 |
|  Watermelon red soil   | 49.23 | 50.59 |
|    Watermelon shell    | 11.02 | 11.67 |
| Watermelon white skin  | 47.16 | 49.23 |
| Watermelon black seeds | 52.75 | 62.79 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 18:52:25 - mmengine - INFO - Iter(val) [11/11]    aAcc: 75.9200  mIoU: 38.5400  mAcc: 45.4300  data_time: 0.0087  time: 0.4311
2023/06/18 18:53:24 - mmengine - INFO - Iter(train) [1700/3000]  lr: 9.6207e-03  eta: 0:13:15  time: 0.6157  data_time: 0.0111  memory: 3615  loss: 0.0452  decode.loss_ce: 0.0320  decode.acc_seg: 72.8760  aux.loss_ce: 0.0132  aux.acc_seg: 72.9401
2023/06/18 18:54:16 - mmengine - INFO - Iter(train) [1800/3000]  lr: 9.5983e-03  eta: 0:12:07  time: 0.5577  data_time: 0.0102  memory: 3615  loss: 0.0391  decode.loss_ce: 0.0277  decode.acc_seg: 86.3678  aux.loss_ce: 0.0114  aux.acc_seg: 87.0087
2023/06/18 18:55:12 - mmengine - INFO - Iter(train) [1900/3000]  lr: 9.5760e-03  eta: 0:11:04  time: 0.5783  data_time: 0.0090  memory: 3615  loss: 0.0362  decode.loss_ce: 0.0263  decode.acc_seg: 85.9680  aux.loss_ce: 0.0099  aux.acc_seg: 87.3779
2023/06/18 18:56:09 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230617_20230618_183452
2023/06/18 18:56:09 - mmengine - INFO - Iter(train) [2000/3000]  lr: 9.5536e-03  eta: 0:10:02  time: 0.5656  data_time: 0.0092  memory: 3615  loss: 0.0364  decode.loss_ce: 0.0254  decode.acc_seg: 82.0709  aux.loss_ce: 0.0110  aux.acc_seg: 79.4037
2023/06/18 18:56:13 - mmengine - INFO - per class results:
2023/06/18 18:56:13 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 69.67 | 98.33 |
|  Watermelon red soil   | 41.45 | 42.55 |
|    Watermelon shell    | 21.98 | 23.45 |
| Watermelon white skin  | 45.06 | 46.84 |
| Watermelon black seeds | 36.66 |  37.3 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 18:56:13 - mmengine - INFO - Iter(val) [11/11]    aAcc: 74.3100  mIoU: 35.8000  mAcc: 41.4100  data_time: 0.0085  time: 0.3665
2023/06/18 18:57:11 - mmengine - INFO - Iter(train) [2100/3000]  lr: 9.5312e-03  eta: 0:09:01  time: 0.5495  data_time: 0.0111  memory: 3615  loss: 0.0380  decode.loss_ce: 0.0264  decode.acc_seg: 79.5990  aux.loss_ce: 0.0116  aux.acc_seg: 81.3110
2023/06/18 18:58:09 - mmengine - INFO - Iter(train) [2200/3000]  lr: 9.5088e-03  eta: 0:08:00  time: 0.5807  data_time: 0.0096  memory: 3615  loss: 0.0371  decode.loss_ce: 0.0261  decode.acc_seg: 93.9789  aux.loss_ce: 0.0110  aux.acc_seg: 94.5160
2023/06/18 18:59:06 - mmengine - INFO - Iter(train) [2300/3000]  lr: 9.4864e-03  eta: 0:06:59  time: 0.5762  data_time: 0.0101  memory: 3615  loss: 0.0397  decode.loss_ce: 0.0281  decode.acc_seg: 85.1868  aux.loss_ce: 0.0116  aux.acc_seg: 86.8652
2023/06/18 19:00:03 - mmengine - INFO - Iter(train) [2400/3000]  lr: 9.4640e-03  eta: 0:05:58  time: 0.5659  data_time: 0.0099  memory: 3615  loss: 0.0326  decode.loss_ce: 0.0230  decode.acc_seg: 88.6658  aux.loss_ce: 0.0095  aux.acc_seg: 90.3717
2023/06/18 19:00:08 - mmengine - INFO - per class results:
2023/06/18 19:00:08 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 69.42 | 97.26 |
|  Watermelon red soil   | 46.98 | 49.26 |
|    Watermelon shell    |  6.13 |  6.44 |
| Watermelon white skin  | 46.73 | 49.33 |
| Watermelon black seeds | 11.28 | 11.35 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 19:00:08 - mmengine - INFO - Iter(val) [11/11]    aAcc: 74.3300  mIoU: 30.0900  mAcc: 35.6100  data_time: 0.0091  time: 0.3707
2023/06/18 19:01:06 - mmengine - INFO - Iter(train) [2500/3000]  lr: 9.4416e-03  eta: 0:04:58  time: 0.5714  data_time: 0.0091  memory: 3615  loss: 0.0431  decode.loss_ce: 0.0306  decode.acc_seg: 82.4127  aux.loss_ce: 0.0125  aux.acc_seg: 82.4219
2023/06/18 19:02:03 - mmengine - INFO - Iter(train) [2600/3000]  lr: 9.4191e-03  eta: 0:03:58  time: 0.5780  data_time: 0.0097  memory: 3615  loss: 0.0409  decode.loss_ce: 0.0286  decode.acc_seg: 89.0717  aux.loss_ce: 0.0123  aux.acc_seg: 89.7339
2023/06/18 19:03:00 - mmengine - INFO - Iter(train) [2700/3000]  lr: 9.3967e-03  eta: 0:02:58  time: 0.5758  data_time: 0.0101  memory: 3615  loss: 0.0341  decode.loss_ce: 0.0244  decode.acc_seg: 87.2528  aux.loss_ce: 0.0097  aux.acc_seg: 87.1002
2023/06/18 19:03:58 - mmengine - INFO - Iter(train) [2800/3000]  lr: 9.3743e-03  eta: 0:01:58  time: 0.5663  data_time: 0.0104  memory: 3615  loss: 0.0346  decode.loss_ce: 0.0238  decode.acc_seg: 74.1913  aux.loss_ce: 0.0108  aux.acc_seg: 74.8596
2023/06/18 19:04:02 - mmengine - INFO - per class results:
2023/06/18 19:04:02 - mmengine - INFO - 
+------------------------+-------+-------+
|         Class          |  IoU  |  Acc  |
+------------------------+-------+-------+
|       background       | 77.01 | 99.26 |
|  Watermelon red soil   | 61.94 |  63.3 |
|    Watermelon shell    | 36.45 |  36.7 |
| Watermelon white skin  | 56.63 | 57.84 |
| Watermelon black seeds | 34.59 | 41.51 |
| Watermelon white seeds |  0.0  |  0.0  |
+------------------------+-------+-------+
2023/06/18 19:04:02 - mmengine - INFO - Iter(val) [11/11]    aAcc: 82.0700  mIoU: 44.4400  mAcc: 49.7700  data_time: 0.0079  time: 0.3633
2023/06/18 19:04:59 - mmengine - INFO - Iter(train) [2900/3000]  lr: 9.3518e-03  eta: 0:00:59  time: 0.5891  data_time: 0.0110  memory: 3615  loss: 0.0430  decode.loss_ce: 0.0308  decode.acc_seg: 82.0282  aux.loss_ce: 0.0122  aux.acc_seg: 81.4819
2023/06/18 19:05:56 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230617_20230618_183452
2023/06/18 19:05:56 - mmengine - INFO - Iter(train) [3000/3000]  lr: 9.3294e-03  eta: 0:00:00  time: 0.5642  data_time: 0.0104  memory: 3615  loss: 0.0331  decode.loss_ce: 0.0238  decode.acc_seg: 94.8303  aux.loss_ce: 0.0094  aux.acc_seg: 94.3848
2023/06/18 19:05:56 - mmengine - INFO - Saving checkpoint at 3000 iterations
